%{
#include <stdio.h>
#include <string>
#include <vector>
#include <stack>
#include "y.tab.h"

using namespace std;

string _programDescription;
string _tempBuff;
FILE* yylogfile;
FILE* yyerrorfile;
int _allOkFlag;
int yylineno = 1;

/*
struct MyObject
{
	bool initialized;
	bool used;
	bool isFunction;
	string dataTypeName;
	vector<string> params;
};

struct dataType
{
	string name;
	vector<MyObject> subtypes;
};

vector<string> dataTypes;
stack<string> encounteredStrings;
*/

%}
%option noyywrap
%x Comment
%x HeadDescription

nume [a-zA-Z][a-zA-Z0-9]*
numeTip [a-zA-Z]*
integer [1-9][0-9]*
whitespaces [ \t]
newline \n
%%

"<acvila>" {return ACVILA_BEGIN;}
"</acvila>" {return ACVILA_END;}

"<head>" {BEGIN HeadDescription; return HEAD_BEGIN;}
<HeadDescription>"</head>" {BEGIN 0; return HEAD_END;}
<HeadDescription>. {_programDescription+=(*yytext);}

"<body>" {return BODY_BEGIN;}
"</body>" {return BODY_END;}

"int"|"string"|"char"|"bool"|"boolean" {return TIP;}

"<if" {return IF_START;}
"</if>" {return IF_END;}
"<while" {return WHILE_START;}
"</while>" {return WHILE_END;}
"<for" {return FOR_START;}
"</for>" {return FOR_END;}
"<else />" {return ELSE;}
"print" {return PRINT;}
"try" {return TRY;}
"endwith" {return ENDWITH;}
"visible" {return VISIBLE;}
"nonvisible" {return NONVISIBLE;}
"include"    {return INCLUDE;}

"," {return COMMA;}
"|" {return OR;}
"&" {return AND;}
"!" {return NOT;}
"(" {return OPEN_PARAN;}
")"	{return CLOSE_PARAN;}
">=" {return GE;}
"<=" {return LE;}
"==" {return EQ;}
"!=" {return NE;}
"+" {return PLUS;}
"-" {return MINUS;}
"*" {return MUL;}
"/" {return DIVIDE;}
">" {return BIGGER_THAN;}
"/>" {return SINGLETAG_END;}
":"  {return DOUA_PUNCTE;}
"::" {return VARIABLE_DELIMITER;}
"::>" {return FUNCTION_DELIMITER;}
"~" {return TILDA;}
"_" {return UNDERSCORE;}


"<struct" {return STRUCT_BEGIN;}
"</struct>" {return STRUCT_END;}
"<camp" {return CAMP_START;}
"<defines>" {return DEFINES_START;}
"</defines>" {return DEFINES_END;}
"<constant" {return CONSTANTA_START;}
"<function" {return FUNCTION_START;}
"</function>" {return FUNCTION_END;}
"<param" {return PARAM_START;}
"<var" {return VAR_START;}
"<class" {return CLASS_START;}
"</class>" {return CLASS_END;}
\"(.)*\" {return STRING;}

{nume} {return NUME;}
{integer} {return INTEGER;}

"/*" {BEGIN Comment;}
<Comment>"*/" {BEGIN 0;}
<Comment>. {}

{whitespaces} ;
{newline} {yylineno++;} 
 
%%


